from random import randint
from math import floor
import unittest


def nb_year(p0, y0, percent, aug, p):
    # your code
    percent = percent / 100
    while p > p0:
        p0 = p0 + aug + p0 * percent
        y0 += 1
    return y0


# Test.describe("nb_year")
# Test.it("Basic tests")
# Test.assert_equals(nb_year(1500, 5, 100, 5000), 15)
# Test.assert_equals(nb_year(1500000, 2.5, 10000, 2000000), 10)
# Test.assert_equals(nb_year(1500000, 0.25, 1000, 2000000), 94)
# Test.assert_equals(nb_year(1500000, 0.25, -1000, 2000000), 151)
# Test.assert_equals(nb_year(1500000, 0.25, 1, 2000000), 116)
# Test.assert_equals(nb_year(1500000, 0.0, 10000, 2000000), 50)
def scorer(n):
    if n < 1:
        print(f'========================\n Scored {n} out of 1\n ========================\n Take another look at it.' \
               f'You can do better')
    else:
        print(f'========================\n Scored {n} out of 1\n ========================\n Well done!')


class Grade(unittest.TestCase):
    def __init__(self, tester=None):
        super(Grade, self).__init__()
        self.tester = tester
        self.correct = 0
        self.wrong = 0

    # def randomTests(self):
    #     print("Random tests ****************** ")
    #     for _ in range(0, 100):
    #         y0 = randint(2010, 3030)
    #         p0 = randint(10000, 15000000)
    #         percent = randint(50, 1000) / 100.0
    #         aug = int(p0 / 200.0)
    #         k = randint(5, 100)
    #         p = p0 + k * aug
    #         # print("p0= ", p0, " percent= ", percent, " aug ", aug, " p ", p)
    #         wrong = 0
    #         # if not(self.assertEqual(self.tester(p0, y0, percent, aug, p), nb_year(p0, y0, percent, aug, p))):
    #         #     wrong += 1
    #         # else:
    #         #     continue
    #         try:
    #             self.assertEqual(self.tester(p0, y0, percent, aug, p), nb_year(p0, y0, percent, aug, p))
    #         except:
    #             wrong += 1
    #             continue
    #     correct = 15 * ((100 - wrong) / 100)
    #     print(f'========================\n Scored {correct} out of 15\n ========================\n')

# Numbers
    def number_practice1(self):
        if self.tester == 32:
            return scorer(1)
        else:
            return scorer(0)

    def number_practice2(self):
        sand, sal, piz, fre, tot = self.tester
        if 8*sand + 7*sal + 10* piz + fre*1.20 == tot:
            self.correct += 1
            return scorer(self.correct)
        else:
            return scorer(0)




# Grade(32).number_practice1()
#
# if __name__ == '__main__':
#     unittest.main()
